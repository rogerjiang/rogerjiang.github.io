---
layout: post
title: leetcode-2-Add Two Numbers
category: leetcode
tags: [Algorithms]
---

# Add Two Numbers

## 一，想法

好吧，只能说自己又开始做一些无聊的事情咯。今天开始刷一刷leetcode的题目吧。似乎有好久没有刷过题咯，再找找ac
的感觉。有时间就来写写题解，让脑子不会生锈吧。顺便每次写完，再英文翻译一下，练习一下我这可怜的英语。

## 二，description

You are given two linked lists representing two non-negative numbers. The digits are 
stored in reverse order and each of their nodes contain a single digit. Add the two 
numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

## 三，resolvent

这个问题算是比较简单，因为存储的结构是一个逆序的，所以需要做的就是按照给定的顺序遍历一遍，加起来，有进位
的就进一下，感觉这个就是看编程的速度的。

## 四，code
<pre>
<code>
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ls1 = l1;
        ListNode* ls2 = l2;
        ListNode* ls = NULL;
        ListNode* le = NULL;
        int val1 = 0;
        int val2 = 0;
        int newAdd = 0;
        
        while(ls1 != NULL || ls2 != NULL)
        {
            if(ls1 == NULL) {
                val1 = 0;
            }
            else {
                val1 = ls1->val;
            }
            
            if(ls2 == NULL) {
                val2 = 0;
            }
            else 
            {
                val2 = ls2->val;
            }
            
            ListNode* l3 = new ListNode(0);
            l3->val = val1 + val2 + newAdd;

            newAdd = l3->val/10;
            l3->val = l3->val%10;
            
            if(ls == NULL) {
                ls = l3;
                le = l3;
            }
            else {
                le->next = l3;
                le = l3;
            }
            
            if(ls1 != NULL) ls1 = ls1->next;
            if(ls2 != NULL) ls2 = ls2->next;
        }
        if(newAdd != 0) {
            ListNode* l3 = new ListNode(0);
            l3->val = newAdd;
            le->next = l3;
            le = ls;
        }
        return ls;
    }
};
</code>
</pre>

